#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьКалендариНаСервере();
	ДанныеXML = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ЗаполнитьКалендари(Команда)
	ЗаполнитьКалендариНаСервере();
	ДанныеXML = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	СформироватьXML();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПроизводственныеКалендариПриИзменении(Элемент)
	ДанныеXML = Неопределено;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьXML()
		
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Calendar");
	Таблица.Колонки.Добавить("Year");
	Таблица.Колонки.Добавить("DayType");
	Таблица.Колонки.Добавить("Date");
	Таблица.Колонки.Добавить("SwapDate");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Календари", ОбщегоНазначения.ВыгрузитьКолонку(ПроизводственныеКалендари, "ПроизводственныйКалендарь", Истина));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеКалендарей.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
		|	ДанныеКалендарей.ПроизводственныйКалендарь.Код КАК КодПроизводственногоКалендаря,
		|	ДанныеКалендарей.Год КАК Год,
		|	ДанныеКалендарей.Дата КАК Дата,
		|	ДанныеКалендарей.ВидДня КАК ВидДня,
		|	ДанныеКалендарей.ДатаПереноса КАК ДатаПереноса
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеКалендарей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК БазовыеДанные
		|		ПО (БазовыеДанные.ПроизводственныйКалендарь = ДанныеКалендарей.ПроизводственныйКалендарь.БазовыйКалендарь)
		|			И (БазовыеДанные.Год = ДанныеКалендарей.Год)
		|			И (БазовыеДанные.Дата = ДанныеКалендарей.Дата)
		|			И (БазовыеДанные.ВидДня = ДанныеКалендарей.ВидДня)
		|			И (БазовыеДанные.ДатаПереноса = ДанныеКалендарей.ДатаПереноса)
		|ГДЕ
		|	ДанныеКалендарей.ПроизводственныйКалендарь В(&Календари)
		|	И БазовыеДанные.Дата ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодПроизводственногоКалендаря,
		|	ПроизводственныйКалендарь,
		|	Год,
		|	Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ПроизводственныйКалендарь") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Год") Цикл
			Пока Выборка.Следующий() Цикл
				Если Выборка["ВидДня"] = ВидДняПоДате(Выборка["Дата"]) И Не ЗначениеЗаполнено(Выборка["ДатаПереноса"]) Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = Таблица.Добавить();
				НоваяСтрока["Calendar"] = Выборка.КодПроизводственногоКалендаря;
				НоваяСтрока["Year"] = Формат(Выборка["Год"], "ЧГ=");
				НоваяСтрока["DayType"] = Строка(Выборка["ВидДня"]);
				НоваяСтрока["Date"] = Формат(Выборка["Дата"], "ДФ=yyyyMMdd");
				НоваяСтрока["SwapDate"] = Формат(Выборка["ДатаПереноса"], "ДФ=yyyyMMdd");
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗаписатьТаблицуВXML(Таблица, НСтр("ru = 'Данные производственного календаря'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТаблицуВXML(Таблица, ИмяТаблицы)
	
	ДанныеXML = Неопределено;
	
	ИменаКолонок = ОбщегоНазначения.ВыгрузитьКолонку(Таблица.Колонки, "Имя");
	ИменаКолонокСтр = СтрСоединить(ИменаКолонок, ",");
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку("UTF-8");
	Запись.ЗаписатьНачалоЭлемента("Items");
	Запись.ЗаписатьАтрибут("Description", ИмяТаблицы);
	Запись.ЗаписатьАтрибут("Columns",     ИменаКолонокСтр);
	
	Для Каждого СтрокаДанных Из Таблица Цикл
		Запись.ЗаписатьНачалоЭлемента("Item");
		Для Каждого ИмяКолонки Из ИменаКолонок Цикл
			Запись.ЗаписатьАтрибут(ИмяКолонки, Строка(СтрокаДанных[ИмяКолонки]));
		КонецЦикла;
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();
	ДанныеXML = Запись.Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ВидДняПоДате(Дата)
	
	НомерДняНедели = ДеньНедели(Дата);
	
	Если НомерДняНедели <= 5 Тогда
		Возврат Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
	КонецЕсли;
	
	Если НомерДняНедели = 6 Тогда
		Возврат Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота;
	КонецЕсли;
	
	Если НомерДняНедели = 7 Тогда
		Возврат Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКалендариНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизводственныеКалендари.Ссылка КАК ПроизводственныйКалендарь,
		|	ПроизводственныеКалендари.Код КАК Код
		|ИЗ
		|	Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари
		|ГДЕ
		|	ПроизводственныеКалендари.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
	ПроизводственныеКалендари.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#КонецОбласти
