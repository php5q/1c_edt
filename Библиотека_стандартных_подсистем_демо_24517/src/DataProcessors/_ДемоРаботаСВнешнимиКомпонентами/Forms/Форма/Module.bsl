
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПапкаWindows    = "%APPDATA%\1C\1Cv8\ExtCompT";
	ПапкаWindowsWeb = "%ProgramData%\1C\1CEWebExt";
	
	ПапкаLinux      = "~/.1cv8/1C/1cv8/ExtCompT/";
	ПапкаLinuxWeb   = "~/bin";
	
	СформироватьПредставлениеИнформации();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПапкаWindowsОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ОткрытьПроводник(ПапкаWindows);
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаWindowsWebОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ОткрытьПроводник(ПапкаWindowsWeb);
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаLinuxОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ОткрытьПроводник(ПапкаLinux);
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаLinuxWebОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ОткрытьПроводник(ПапкаLinuxWeb);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Сценарии подключения

&НаКлиенте
Процедура ПодключитьКомпонентуБезКэширования(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ключ", "Значение");
	
	Оповещение = Новый ОписаниеОповещения(
		"ПодключитьКомпонентуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыПодключения = ВнешниеКомпонентыКлиент.ПараметрыПодключения();
	ПараметрыПодключения.Кэшировать     = Ложь;
	ПараметрыПодключения.ТекстПояснения = НСтр("ru = 'Демо: Для использования сканера штрихкодов требуется
	                                                 |внешняя компонента «1С:Сканеры штрихкода (NativeApi)».'");
	
	ВнешниеКомпонентыКлиент.ПодключитьКомпоненту(Оповещение, "InputDevice",, ПараметрыПодключения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьКомпоненту(Команда)

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ключ", "Значение");
	
	Оповещение = Новый ОписаниеОповещения(
		"ПодключитьКомпонентуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыПодключения = ВнешниеКомпонентыКлиент.ПараметрыПодключения();
	ПараметрыПодключения.ТекстПояснения = НСтр("ru = 'Демо: Для использования сканера штрихкодов требуется
	                                                 |внешняя компонента «1С:Сканеры штрихкода (NativeApi)».'");
	
	ВнешниеКомпонентыКлиент.ПодключитьКомпоненту(Оповещение, "InputDevice", "8.1.7.1", ПараметрыПодключения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьКомпонентуCOM(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ключ", "Значение");
	
	Оповещение = Новый ОписаниеОповещения(
		"ПодключитьКомпонентуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыПодключения = ВнешниеКомпонентыКлиент.ПараметрыПодключения();
	ПараметрыПодключения.ТекстПояснения = НСтр("ru = 'Демо: Для использования сканера штрихкодов требуется
	                                                 |внешняя компонента «1С:Сканеры штрихкода».'");
	
	ВнешниеКомпонентыКлиент.ПодключитьКомпоненту(Оповещение, "Scanner",, ПараметрыПодключения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьКомпонентуИзМакета(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ключ", "Значение");	
	
	Оповещение = Новый ОписаниеОповещения(
		"ПодключитьКомпонентуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыПодключения = ОбщегоНазначенияКлиент.ПараметрыПодключенияКомпоненты();
	ПараметрыПодключения.ТекстПояснения = НСтр("ru = 'Демо: Для оформления заявления на выпуск сертификата требуется
	                                                 |внешняя компонента «Криптография (CryptS)».'");
	ПараметрыПодключения.Кэшировать = Ложь;
	ПараметрыПодключения.ИдентификаторыСозданияОбъектов.Добавить("BinaryDataS");
	ПараметрыПодключения.ИдентификаторыСозданияОбъектов.Добавить("CryptS");
	
	ОбщегоНазначенияКлиент.ПодключитьКомпонентуИзМакета(Оповещение, 
		"CryptS",
		"Обработка.ЗаявлениеНаВыпускНовогоКвалифицированногоСертификата.Макет.КомпонентаОбмена",
		ПараметрыПодключения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьКомпонентуИзРеестраWindows(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ключ", "Значение");
	
	Оповещение = Новый ОписаниеОповещения(
		"ПодключитьКомпонентуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ВнешниеКомпонентыКлиент.ПодключитьКомпонентуИзРеестраWindows(Оповещение, "SBRFCOMObject", "SBRFCOMExtension");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьКомпонентуИзМакетаНаСервере(Команда)
	
	ПодключитьКомпонентуИзМакетаНаСервереНаСервере();
	
КонецПроцедуры

// Сценарий установки

&НаКлиенте
Процедура УстановитьКомпоненту(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ключ", "Значение");
	
	ПараметрыУстановки = ВнешниеКомпонентыКлиент.ПараметрыУстановки();
	ПараметрыУстановки.ТекстПояснения = НСтр("ru = 'Демо: Для использования сканера штрихкодов требуется
	                                               |внешняя компонента «1С:Сканеры штрихкода (NativeApi)».'");
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьКомпонентуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ВнешниеКомпонентыКлиент.УстановитьКомпоненту(Оповещение, "InputDevice",, ПараметрыУстановки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомпонентуИзМакета(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьКомпонентуЗавершение", ЭтотОбъект);
	
	ПараметрыУстановки = ОбщегоНазначенияКлиент.ПараметрыУстановкиКомпоненты();
	ПараметрыУстановки.ТекстПояснения = НСтр("ru = 'Для оформления заявления на выпуск сертификата требуется
	                                               |внешняя компонента «Криптография (CryptS)».'");
	
	ОбщегоНазначенияКлиент.УстановитьКомпонентуИзМакета(Оповещение,
		"Обработка.ЗаявлениеНаВыпускНовогоКвалифицированногоСертификата.Макет.КомпонентаОбмена",
		ПараметрыУстановки);
	
КонецПроцедуры

// Сценарий загрузки из файла.

&НаКлиенте
Процедура ЗагрузитьВнешнийМодульИзФайлаНажатие(Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ключ", "Значение");
	
	ПараметрыЗагрузки = ВнешниеКомпонентыКлиент.ПараметрыЗагрузки();
	ПараметрыЗагрузки.Идентификатор = Идентификатор;
	ПараметрыЗагрузки.Версия        = Версия;
	
	Оповещение = Новый ОписаниеОповещения(
		"ЗагрузитьВнешнийМодульИзФайлаПослеЗагрузкиКомпоненты", ЭтотОбъект, ДополнительныеПараметры);
	
	ВнешниеКомпонентыКлиент.ЗагрузитьКомпонентуИзФайла(Оповещение, ПараметрыЗагрузки);
	
КонецПроцедуры

// Сценарий получения информации.

&НаКлиенте
Процедура ПолучитьИнформацию(Команда)
	
	ПолучитьИнформациюНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Сценарии подключения

&НаКлиенте
Процедура ПодключитьКомпонентуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПодключаемыйМодуль = Неопределено;
	
	Если Результат.Подключено Тогда 
	 	ПодключаемыйМодуль = Результат.ПодключаемыйМодуль;
	Иначе
		Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда 
			ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПодключаемыйМодуль <> Неопределено Тогда 
		ПоказатьОповещениеПользователя(НСтр("ru = 'Демо: Успешное подключение'"),,, БиблиотекаКартинок.Успешно32);
	КонецЕсли;
	
	ПодключаемыйМодуль = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ПодключитьКомпонентуИзМакетаНаСервереНаСервере()
	
	ПодключаемыйМодуль = ОбщегоНазначения.ПодключитьКомпонентуИзМакета("CNameDecl", "ОбщийМакет.КомпонентаСклоненияФИО");
	Если ПодключаемыйМодуль = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Демо: Ошибка при подключении компоненты'"));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Демо: Успешное подключение'"));
	КонецЕсли;
	
	ПодключаемыйМодуль = Неопределено;
	
КонецПроцедуры

// Сценарий установки

&НаКлиенте
Процедура УстановитьКомпонентуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Установлено Тогда 
		ПоказатьОповещениеПользователя(НСтр("ru = 'Демо: Успешная установка'"),,, БиблиотекаКартинок.Информация32);
	Иначе
		Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Сценарий загрузки из файла.

&НаКлиенте
Процедура ЗагрузитьВнешнийМодульИзФайлаПослеЗагрузкиКомпоненты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Загружено Тогда 
	
		ИнформацияОКомпоненте = ИнформацияОКомпоненте();
		ЗаполнитьЗначенияСвойств(ИнформацияОКомпоненте, Результат);
		
		Идентификатор = Результат.Идентификатор;
		Версия        = Результат.Версия;
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Демо: Успешная загрузка'"),,, БиблиотекаКартинок.Информация32);
		
	Иначе 
		
		Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьПредставлениеИнформации();
	
КонецПроцедуры

// Сценарий получения информации.

&НаКлиентеНаСервереБезКонтекста
Функция ИнформацияОКомпоненте()
	
	Информация = Новый Структура;
	Информация.Вставить("Идентификатор");
	Информация.Вставить("Версия");
	Информация.Вставить("Наименование");
	
	Возврат Информация;
	
КонецФункции

&НаСервере
Процедура СформироватьПредставлениеИнформации()
	
	Если ЗначениеЗаполнено(ИнформацияОКомпоненте) Тогда
		Шаблон = НСтр("ru = 'Демо: %1. Версия %2.'");
		Элементы.ИнформацияОВнешнемМодуле.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
			ИнформацияОКомпоненте.Наименование, 
			ИнформацияОКомпоненте.Версия);
			
		Элементы.ЗагрузитьВнешнийМодульИзФайла.Заголовок = НСтр("ru = 'Обновить из файла...'");
	Иначе
		Элементы.ИнформацияОВнешнемМодуле.Заголовок = НСтр("ru = 'Демо: Не загружен.'");
		Элементы.ЗагрузитьВнешнийМодульИзФайла.Заголовок = НСтр("ru = 'Загрузить из файла...'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнформациюНаСервере()
	
	Результат = ВнешниеКомпонентыВызовСервера.ИнформацияОКомпоненте(Идентификатор,
		?(ПустаяСтрока(Версия), Неопределено, Версия));
		
	Если Результат.Существует Тогда
		
		ИнформацияОКомпоненте = ИнформацияОКомпоненте();
		ЗаполнитьЗначенияСвойств(ИнформацияОКомпоненте, Результат);
		
		Идентификатор = Результат.Идентификатор;
		Версия        = Результат.Версия;

	Иначе
		
		ИнформацияОКомпоненте = Неопределено;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибки);
		
	КонецЕсли;
	
	СформироватьПредставлениеИнформации(); // Формируем представление по полученным данным.
	
КонецПроцедуры


#КонецОбласти


