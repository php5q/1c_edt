
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиОбновления

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра             = Метаданные.РегистрыСведений.РезультатыПроверкиУчета.ПолноеИмя();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезультатыПроверкиУчета.ПроблемныйОбъект КАК ПроблемныйОбъект,
	|	РезультатыПроверкиУчета.ПравилоПроверки КАК ПравилоПроверки,
	|	РезультатыПроверкиУчета.ВидПроверки КАК ВидПроверки,
	|	РезультатыПроверкиУчета.КлючУникальности КАК КлючУникальности
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиУчета КАК РезультатыПроверкиУчета
	|ГДЕ
	|	РезультатыПроверкиУчета.УдалитьИгнорироватьПроблему";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = Метаданные.РегистрыСведений.РезультатыПроверкиУчета.ПолноеИмя();
	ДополнительныеПараметрыВыборкиДанныхДляОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		ПолноеИмяРегистра,
		ДополнительныеПараметрыВыборкиДанныхДляОбработки);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("ПроблемныйОбъект", Выборка.ПроблемныйОбъект);
			ЭлементБлокировки.УстановитьЗначение("ПравилоПроверки",  Выборка.ПравилоПроверки);
			ЭлементБлокировки.УстановитьЗначение("ВидПроверки",      Выборка.ВидПроверки);
			ЭлементБлокировки.УстановитьЗначение("КлючУникальности", Выборка.КлючУникальности);
			Блокировка.Заблокировать();
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КлючУникальности.Установить(Выборка.КлючУникальности);
			НаборЗаписей.Отбор.ПроблемныйОбъект.Установить(Выборка.ПроблемныйОбъект);
			НаборЗаписей.Отбор.ПравилоПроверки.Установить(Выборка.ПравилоПроверки);
			НаборЗаписей.Отбор.ВидПроверки.Установить(Выборка.ВидПроверки);
			
			НаборЗаписей.Прочитать();
			Для Каждого ТекущаяЗапись Из НаборЗаписей Цикл
				ТекущаяЗапись.ИгнорироватьПроблему = Истина;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
			
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли